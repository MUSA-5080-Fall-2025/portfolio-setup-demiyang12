summarize(
n_tracts   = n(),
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
avg_pop    = mean(total_popE, na.rm = TRUE),
median_pop = median(total_popE, na.rm = TRUE),
mean_white_pct    = mean(pct_white, na.rm = TRUE),
mean_black_pct    = mean(pct_black, na.rm = TRUE),
mean_hispanic_pct = mean(pct_hispanic, na.rm = TRUE),
w_white_pct    = 100 * sum(whiteE, na.rm = TRUE) / sum(total_popE, na.rm = TRUE),
w_black_pct    = 100 * sum(blackE, na.rm = TRUE) / sum(total_popE, na.rm = TRUE),
w_hispanic_pct = 100 * sum(hispanicE, na.rm = TRUE) / sum(total_popE, na.rm = TRUE)
)
# Create a professional table showing the patterns
kable(pattern_analysis30, digits = 1,
caption = "Comparison of Tracts With and Without High MOE Issues (30% Threshold)")
# In my study area, all the tracts are defined to high MOE if defining "high" as 15%. So I redefined high MOE tracts as tracts where demographic variable has MOE > 50%.
demographic_moe <- demographic_moe %>%
mutate(
high_moe_flag50 = ifelse(
white_moe_pct > 50 | black_moe_pct > 50 | hispanic_moe_pct > 50,
TRUE, FALSE
)
)
moe_summary50 <- demographic_moe %>%
summarize(
n_total = n(),
n_high_moe = sum(high_moe_flag50, na.rm = TRUE),
pct_high_moe = (n_high_moe / n_total) * 100
)
moe_summary50
# Group tracts by whether they have high MOE issues
pattern_analysis50 <- demographic_moe %>%
group_by(high_moe_flag50) %>%
summarize(
n_tracts   = n(),
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
avg_pop    = mean(total_popE, na.rm = TRUE),
median_pop = median(total_popE, na.rm = TRUE),
mean_white_pct    = mean(pct_white, na.rm = TRUE),
mean_black_pct    = mean(pct_black, na.rm = TRUE),
mean_hispanic_pct = mean(pct_hispanic, na.rm = TRUE),
w_white_pct    = 100 * sum(whiteE, na.rm = TRUE) / sum(total_popE, na.rm = TRUE),
w_black_pct    = 100 * sum(blackE, na.rm = TRUE) / sum(total_popE, na.rm = TRUE),
w_hispanic_pct = 100 * sum(hispanicE, na.rm = TRUE) / sum(total_popE, na.rm = TRUE)
)
# Create a professional table showing the patterns
kable(pattern_analysis50, digits = 1,
caption = "Comparison of Tracts With and Without High MOE Issues (30% Threshold)")
# Group tracts by whether they have high MOE issues
pattern_analysis50 <- demographic_moe %>%
group_by(high_moe_flag50) %>%
summarize(
n_tracts   = n(),
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
avg_pop    = mean(total_popE, na.rm = TRUE),
median_pop = median(total_popE, na.rm = TRUE),
mean_white_pct    = mean(pct_white, na.rm = TRUE),
mean_black_pct    = mean(pct_black, na.rm = TRUE),
mean_hispanic_pct = mean(pct_hispanic, na.rm = TRUE),
w_white_pct    = 100 * sum(whiteE, na.rm = TRUE) / sum(total_popE, na.rm = TRUE),
w_black_pct    = 100 * sum(blackE, na.rm = TRUE) / sum(total_popE, na.rm = TRUE),
w_hispanic_pct = 100 * sum(hispanicE, na.rm = TRUE) / sum(total_popE, na.rm = TRUE)
)
# Create a professional table showing the patterns
kable(pattern_analysis50, digits = 1,
caption = "Comparison of Tracts With and Without High MOE Issues (30% Threshold)")
quarto::quarto_render("myfile.qmd")
quarto::quarto_check()
install.packages("quarto")
library(tidycensus)
library(tidyverse)
library(knitr)
census_api_key("80e5bd5c45e555d282b37bb6bb289ce3e4ce22ed", install = TRUE)
library(tidycensus)
library(tidyverse)
library(knitr)
census_api_key(Sys.getenv("80e5bd5c45e555d282b37bb6bb289ce3e4ce22ed"))
# Write your get_acs() code here
ca_data_original <- get_acs(
geography = "county",
state = "CA",
variables = c(
median_income = "B19013_001",
total_pop = "B01003_001"
),
year = 2022,
survey = "acs5",
output = "wide"
)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
ca_data <- ca_data_original %>%
mutate(NAME = str_remove(NAME, " County, California"))
# Display the first few rows
head(ca_data)
library(tidycensus)
library(tidyverse)
library(knitr)
census_api_key(Sys.getenv("934b17adf570a9b2709d2beef4a5a0449ed28793"))
# Write your get_acs() code here
ca_data_original <- get_acs(
geography = "county",
state = "CA",
variables = c(
median_income = "B19013_001",
total_pop = "B01003_001"
),
year = 2022,
survey = "acs5",
output = "wide"
)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
ca_data <- ca_data_original %>%
mutate(NAME = str_remove(NAME, " County, California"))
# Display the first few rows
head(ca_data)
View(ca_data_reliability)
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
recommendations_data <- ca_data_reliability %>%
select(
County = NAME,
Median_Income = median_incomeE,
MOE_Percent = income_moe_pct,
Reliability = income_reliability
) %>%
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
mutate(
Recommendation = case_when(
Reliability == "High Confidence" ~ "Safe for algorithmic decisions",
Reliability == "Moderate Confidence" ~ "Use with caution â€“ monitor outcomes",
Reliability == "Low Confidence" ~ "Requires manual review or additional data"
)
)
# Format as a professional table with kable()
kable(recommendations_data, digits = 1,
caption = "Decision Framework for Algorithm Implementation")
View(recommendations_data)
high_conf_table <- recommendations_data %>%
filter(Reliability == "High Confidence") %>%
select(County, Median_Income, MOE_Percent, Reliability, Recommendation)
high_conf_table
moderate_conf_table <- recommendations_data %>%
filter(Reliability == "Moderate Confidence") %>%
select(County, Median_Income, MOE_Percent, Reliability, Recommendation)
moderate_conf_table
low_conf_table <- recommendations_data %>%
filter(Reliability == "Low Confidence") %>%
select(County, Median_Income, MOE_Percent, Reliability, Recommendation)
low_conf_table
version
install.packages("usethis")
usethis::edit_r_environ()
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Set your Census API key
census_api_key(Sys.getenv("934b17adf570a9b2709d2beef4a5a0449ed28793"))
# Choose your state for analysis - assign it to a variable called my_state
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Set your Census API key
census_api_key(Sys.getenv("934b17adf570a9b2709d2beef4a5a0449ed28793"))
# Choose your state for analysis - assign it to a variable called my_state
Sys.getenv("CENSUS_API_KEY")
usethis::edit_r_environ()
Sys.getenv("CENSUS_API_KEY")
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Set your Census API key
census_api_key(Sys.getenv("934b17adf570a9b2709d2beef4a5a0449ed28793"))
# Choose your state for analysis - assign it to a variable called my_state
# Write your get_acs() code here
ca_data_original <- get_acs(
geography = "county",
state = "CA",
variables = c(
median_income = "B19013_001",
total_pop = "B01003_001"
),
year = 2022,
survey = "acs5",
output = "wide"
)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
ca_data <- ca_data_original %>%
mutate(NAME = str_remove(NAME, " County, California"))
# Display the first few rows
head(ca_data)
# Calculate MOE percentage and reliability categories using mutate()
ca_data_reliability <- ca_data %>%
mutate(
income_moe_pct = (median_incomeM / median_incomeE) * 100,
income_reliability = case_when(
income_moe_pct < 5  ~ "High Confidence",
income_moe_pct < 10 ~ "Moderate Confidence",
TRUE                ~ "Low Confidence"
),
income_unreliable = income_moe_pct > 10,
)
# Create a summary showing count of counties in each reliability category
income_summary <- ca_data_reliability %>%
count(income_reliability) %>%
mutate(percentage = n / sum(n) * 100)
income_summary
# Hint: use count() and mutate() to add percentages
# Create table of top 5 counties by MOE percentage
top5_moe <- ca_data_reliability %>%
arrange(desc(income_moe_pct)) %>%
slice(1:5) %>%
select(
County = NAME,
Median_Income = median_incomeE,
Margin_of_Error = median_incomeM,
MOE_Percent = income_moe_pct,
Reliability = income_reliability,
Population = total_popE
)
# Format as table with kable() - include appropriate column names and caption
kable(top5_moe, digits = 2, caption = "Top 5 Counties in California by Income MOE%")
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
selected_counties <- ca_data_reliability %>%
filter(
income_reliability %in% c("High Confidence",
"Moderate Confidence",
"Low Confidence")
) %>%
group_by(income_reliability) %>%
slice(1) %>%
ungroup() %>%
# Display the selected counties with their key characteristics
# Show: county name, median income, MOE percentage, reliability category
select(
GEOID = GEOID,
County = NAME,
Median_Income = median_incomeE,
MOE_Percent = income_moe_pct,
Reliability = income_reliability,
Population = total_popE
)
selected_counties
# Define your race/ethnicity variables with descriptive names
race_vars <- c(
white    = "B03002_003",
black    = "B03002_004",
hispanic = "B03002_012",
total_pop    = "B03002_001"
)
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
county_codes <- substr(selected_counties$GEOID,3,5)
# means the 3rd to 5th of county GEOID
tract_data <- get_acs(
geography = "tract",
state = "CA",
county = county_codes,
variables = race_vars,
year = 2022,
survey = "acs5",
output = "wide"
)
# Calculate percentage of each group using mutate()
# Create percentages for white, Black, and Hispanic populations
tract_data <- tract_data %>%
mutate(
pct_white    = 100 * whiteE / total_popE,
pct_black    = 100 * blackE / total_popE,
pct_hispanic = 100 * hispanicE / total_popE,
# Add readable tract and county name columns using str_extract() or similar
Tract  = str_extract(NAME, "Census Tract \\d+(?:\\.\\d+)?"),
County = str_extract(NAME, "[A-Za-z]+ County")
)
head(tract_data)
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
top_hispanic_tract <- tract_data %>%
arrange(desc(pct_hispanic)) %>%
slice(1) %>%
select(GEOID, County, Tract, pct_hispanic)
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
county_summary <- tract_data %>%
group_by(County) %>%
summarize(
n_tracts = n(),
avg_white = mean(pct_white, na.rm = TRUE),
avg_black = mean(pct_black, na.rm = TRUE),
avg_hispanic = mean(pct_hispanic, na.rm = TRUE)
)
# Create a nicely formatted table of your results using kable()
kable(top_hispanic_tract, digits = 1,
caption = "Tract with the Highest Hispanic Population (%)")
kable(county_summary, digits = 1,
caption = "Average Demographics by County")
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
demographic_moe <- tract_data %>%
mutate(
white_moe_pct    = (whiteM / whiteE) * 100,
black_moe_pct    = (blackM / blackE) * 100,
hispanic_moe_pct = (hispanicM / hispanicE) * 100,
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
high_moe_flag = ifelse(
white_moe_pct > 15 | black_moe_pct > 15 | hispanic_moe_pct > 15,
TRUE, FALSE
)
)
demographic_moe %>%
select(County, white_moe_pct, black_moe_pct, hispanic_moe_pct)
# Create summary statistics showing how many tracts have data quality issues
moe_summary <- demographic_moe %>%
summarize(
n_total = n(),
n_high_moe = sum(high_moe_flag, na.rm = TRUE),
pct_high_moe = (n_high_moe / n_total) * 100
)
moe_summary
# In my study area, all the tracts are defined to high MOE if defining "high" as 15%. So I redefined high MOE tracts as tracts where demographic variable has MOE > 50%.
demographic_moe <- demographic_moe %>%
mutate(
high_moe_flag50 = ifelse(
white_moe_pct > 50 | black_moe_pct > 50 | hispanic_moe_pct > 50,
TRUE, FALSE
)
)
moe_summary50 <- demographic_moe %>%
summarize(
n_total = n(),
n_high_moe = sum(high_moe_flag50, na.rm = TRUE),
pct_high_moe = (n_high_moe / n_total) * 100
)
moe_summary50
# Group tracts by whether they have high MOE issues
pattern_analysis50 <- demographic_moe %>%
group_by(high_moe_flag50) %>%
summarize(
n_tracts   = n(),
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
avg_pop    = mean(total_popE, na.rm = TRUE),
median_pop = median(total_popE, na.rm = TRUE),
mean_white_pct    = mean(pct_white, na.rm = TRUE),
mean_black_pct    = mean(pct_black, na.rm = TRUE),
mean_hispanic_pct = mean(pct_hispanic, na.rm = TRUE),
w_white_pct    = 100 * sum(whiteE, na.rm = TRUE) / sum(total_popE, na.rm = TRUE),
w_black_pct    = 100 * sum(blackE, na.rm = TRUE) / sum(total_popE, na.rm = TRUE),
w_hispanic_pct = 100 * sum(hispanicE, na.rm = TRUE) / sum(total_popE, na.rm = TRUE)
)
# Create a professional table showing the patterns
kable(pattern_analysis50, digits = 1,
caption = "Comparison of Tracts With and Without High MOE Issues (30% Threshold)")
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
recommendations_data <- ca_data_reliability %>%
select(
County = NAME,
Median_Income = median_incomeE,
MOE_Percent = income_moe_pct,
Reliability = income_reliability
) %>%
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
mutate(
Recommendation = case_when(
Reliability == "High Confidence" ~ "Safe for algorithmic decisions",
Reliability == "Moderate Confidence" ~ "Use with caution â€“ monitor outcomes",
Reliability == "Low Confidence" ~ "Requires manual review or additional data"
)
)
# Format as a professional table with kable()
kable(recommendations_data, digits = 1,
caption = "Decision Framework for Algorithm Implementation")
high_conf_table <- recommendations_data %>%
filter(Reliability == "High Confidence") %>%
select(County, Median_Income, MOE_Percent, Reliability, Recommendation)
high_conf_table
moderate_conf_table <- recommendations_data %>%
filter(Reliability == "Moderate Confidence") %>%
select(County, Median_Income, MOE_Percent, Reliability, Recommendation)
moderate_conf_table
low_conf_table <- recommendations_data %>%
filter(Reliability == "Low Confidence") %>%
select(County, Median_Income, MOE_Percent, Reliability, Recommendation)
low_conf_table
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
selected_counties <- ca_data_reliability %>%
filter(
income_reliability %in% c("High Confidence",
"Moderate Confidence",
"Low Confidence")
) %>%
group_by(income_reliability) %>%
slice(1) %>%
ungroup() %>%
# Display the selected counties with their key characteristics
# Show: county name, median income, MOE percentage, reliability category
select(
GEOID = GEOID,
County = NAME,
Median_Income = median_incomeE,
MOE_Percent = income_moe_pct,
Reliability = income_reliability,
Population = total_popE
)
kable(selected_counties, digits = 2, caption = "3 selected counties")
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
demographic_moe <- tract_data %>%
mutate(
white_moe_pct    = (whiteM / whiteE) * 100,
black_moe_pct    = (blackM / blackE) * 100,
hispanic_moe_pct = (hispanicM / hispanicE) * 100,
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
high_moe_flag = ifelse(
white_moe_pct > 15 | black_moe_pct > 15 | hispanic_moe_pct > 15,
TRUE, FALSE
)
)
demographic_moe %>%
select(County, white_moe_pct, black_moe_pct, hispanic_moe_pct)
# Create summary statistics showing how many tracts have data quality issues
moe_summary <- demographic_moe %>%
summarize(
n_total = n(),
n_high_moe = sum(high_moe_flag, na.rm = TRUE),
pct_high_moe = (n_high_moe / n_total) * 100
)
kable(moe_summary, digits = 0,
caption = "Tract Demographic MOE Summary")
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
recommendations_data <- ca_data_reliability %>%
select(
County = NAME,
Median_Income = median_incomeE,
MOE_Percent = income_moe_pct,
Reliability = income_reliability
) %>%
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
mutate(
Recommendation = case_when(
Reliability == "High Confidence" ~ "Safe for algorithmic decisions",
Reliability == "Moderate Confidence" ~ "Use with caution â€“ monitor outcomes",
Reliability == "Low Confidence" ~ "Requires manual review or additional data"
)
)
# Format as a professional table with kable()
kable(head(recommendations_data,10) digits = 1,
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
recommendations_data <- ca_data_reliability %>%
select(
County = NAME,
Median_Income = median_incomeE,
MOE_Percent = income_moe_pct,
Reliability = income_reliability
) %>%
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
mutate(
Recommendation = case_when(
Reliability == "High Confidence" ~ "Safe for algorithmic decisions",
Reliability == "Moderate Confidence" ~ "Use with caution â€“ monitor outcomes",
Reliability == "Low Confidence" ~ "Requires manual review or additional data"
)
)
# Format as a professional table with kable()
kable(head(recommendations_data,10), digits = 1,
caption = "Decision Framework for Algorithm Implementation")
high_conf_table <- recommendations_data %>%
filter(Reliability == "High Confidence") %>%
select(County, Median_Income, MOE_Percent, Reliability, Recommendation)
kable(head(high_conf_table,10), digits = 1,
caption = "High Confidence Table")
low_conf_table <- recommendations_data %>%
filter(Reliability == "Low Confidence") %>%
select(County, Median_Income, MOE_Percent, Reliability, Recommendation)
kable(low_conf_table, digits = 1,
caption = "Low Confidence Table")
moderate_conf_table <- recommendations_data %>%
filter(Reliability == "Moderate Confidence") %>%
select(County, Median_Income, MOE_Percent, Reliability, Recommendation)
kable(moderate_conf_table, digits = 1,
caption = "Moderate Confidence Table")
